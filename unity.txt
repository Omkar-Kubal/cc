3. Develop Snake Game using pygame. 
import pygame, random, sys
pygame.init()

w, h = 600, 400
win = pygame.display.set_mode((w, h))
clock = pygame.time.Clock()

white, red, green, black = (255, 255, 255), (200, 0, 0), (0, 200, 0), (0, 0, 0)

snake = [[100, 50]]
snake_dir = 'RIGHT'
food = [300, 200]
speed = 15

def draw_snake(snake):
    for pos in snake:
        pygame.draw.rect(win, green, pygame.Rect(pos[0], pos[1], 10, 10))

while True:
    for e in pygame.event.get():
        if e.type == pygame.QUIT: pygame.quit(); sys.exit()
        if e.type == pygame.KEYDOWN:
            if e.key == pygame.K_UP and snake_dir != 'DOWN': snake_dir = 'UP'
            if e.key == pygame.K_DOWN and snake_dir != 'UP': snake_dir = 'DOWN'
            if e.key == pygame.K_LEFT and snake_dir != 'RIGHT': snake_dir = 'LEFT'
            if e.key == pygame.K_RIGHT and snake_dir != 'LEFT': snake_dir = 'RIGHT'

    head = snake[0][:]
    if snake_dir == 'UP': head[1] -= 10
    if snake_dir == 'DOWN': head[1] += 10
    if snake_dir == 'LEFT': head[0] -= 10
    if snake_dir == 'RIGHT': head[0] += 10
    snake.insert(0, head)

    if head == food:
        food = [random.randrange(0, w//10)*10, random.randrange(0, h//10)*10]
    else:
        snake.pop()

    if head[0] < 0 or head[0] >= w or head[1] < 0 or head[1] >= h or head in snake[1:]:
        pygame.quit(); sys.exit()
        
    win.fill(black)
    draw_snake(snake)
    pygame.draw.rect(win, red, pygame.Rect(food[0], food[1], 10, 10))
    pygame.display.flip()
    clock.tick(speed) 





4. Create 2D Target Shooting Game. 
import pygame, random
pygame.init()

w,h=800,600
scr=pygame.display.set_mode((w,h))
clock=pygame.time.Clock()
font=pygame.font.SysFont(None,36)

player=pygame.Rect(w//2-25,h-50,50,50)
bullets=[]; enemies=[]; score=0
run=True

while run:
    for e in pygame.event.get():
        if e.type==pygame.QUIT: run=False
        if e.type==pygame.KEYDOWN and e.key==pygame.K_SPACE:
            bullets.append(pygame.Rect(player.centerx-5,player.top,10,10))

    keys=pygame.key.get_pressed()
    if keys[pygame.K_LEFT]: player.x-=5
    if keys[pygame.K_RIGHT]: player.x+=5

    for b in bullets[:]:
        b.y-=10
        if b.top<0: bullets.remove(b)

    if random.randint(1,50)==1:
        enemies.append(pygame.Rect(random.randint(20,w-20),0,40,40))
    for en in enemies[:]:
        en.y+=5
        if en.top>h: enemies.remove(en)

    for b in bullets[:]:
        for en in enemies[:]:
            if b.colliderect(en):
                score+=1; bullets.remove(b); enemies.remove(en); break
    for en in enemies:
        if player.colliderect(en): run=False

    scr.fill((255,255,255))
    pygame.draw.rect(scr,(255,0,0),player)
    for b in bullets: pygame.draw.polygon(scr,(0,0,255),[(b.left,b.bottom),(b.centerx,b.top),(b.right,b.bottom)])
    for en in enemies: pygame.draw.circle(scr,(255,0,0),en.center,20)
    scr.blit(font.render(f"Score:{score}",1,(0,0,0)),(10,10))
    pygame.display.flip(); clock.tick(60)


scr.blit(font.render("GAME OVER",1,(255,0,0)),(w//2-100,h//2))
pygame.display.flip(); pygame.time.wait(2000)
pygame.quit()





5.Creating 2D Infinite Scrolling Background
step1. add image and set wrap to 'repeat'
step2. GameObject> 3D object> Quad(set scale X=20,Y= 10)
step3. drag and drop image on quad in scene.
step4. add scroll code in quad.
code:
using UnityEngine;

public class scroll : MonoBehaviour
{   public float speed = 0.1f;
    void Start()
    {
        
    }

    void Update()
    {
       Vector2 offset = new Vector2(Time.time * speed, 0); 
       GetComponent<Renderer>().material.mainTextureOffset = offset;
    }

}






6.Create Camera Shake Effect in Unity
step1. add image and set wrap to 'repeat'
step2. GameObject> 3D object> Quad(set scale X=20,Y= 10)
step3. drag and drop image on quad in scene.
step4. add shake code in quad.
(Image will only shake while 'S' is pressed)
code:
using UnityEngine;

public class scroll : MonoBehaviour
{
    public float speed = 0.1f;

    void Update()
    {
        // Only shake when S key is held down
        if (Input.GetKey(KeyCode.S))
        {
            Vector2 offset = Random.insideUnitCircle * speed;
            GetComponent<Renderer>().material.mainTextureOffset = offset;
        }
    }
}






7.Create Snowfall Particle effect in Unity
GameObject> Effects> Particle System
Set shape to box: (Scale: X= 10)
Set start speed to 0: 
Set Velocity over Lifetime(y =-1,-2)
Increase Emission to “100”: 
Set Start Size to Range [0.05 to 0.2]: 
Set Size over Lifetime “Fade Away”: 
Add NOISE to create Natural Movement(Strength=0.2) 





8. Develop Android Game with Unity 
Set Layout To 2 by 3
step1: Switch Platform to android
step2: Edit> Project Settings> Set Active Input Handing = old
step3: Create wall "player 2D Object > sprites > square-add Box Colider 2D, Rigid Body2D(static)
step4: create enemy and player 2D Object > sprites > circle and set the color blue for player and red for enemy. add Box Colider 2D, Rigid Body2D(Dynamic, gravity scale=0)
Step5: 
Player Code:
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    public float moveSpeed = 5f;
    Rigidbody2D rb;
    Vector2 moveInput;

    void Start() => rb = GetComponent<Rigidbody2D>();

    void Update()
    {
#if UNITY_STANDALONE
        moveInput = new Vector2(Input.GetAxisRaw("Horizontal"), Input.GetAxisRaw("Vertical")).normalized;
#else
        Vector2 pos = Vector2.zero;
        bool isMoving = false;

        if (Input.touchCount > 0) { pos = Input.GetTouch(0).position; isMoving = true; }
        else if (Input.GetMouseButton(0)) { pos = Input.mousePosition; isMoving = true; }

        moveInput = isMoving ? (pos - new Vector2(Screen.width/2f, Screen.height/2f)).normalized : Vector2.zero;
#endif
    }

    void FixedUpdate() => rb.linearVelocity = moveInput * moveSpeed;
}

EnemyAI code:- 
using UnityEngine; 
 
public class EnemyAI : MonoBehaviour 
{ 
    public float speed = 3f;  // Speed at which the enemy moves 
    public Transform player;  // Reference to the player 
 
    private Rigidbody2D rb;   // Reference to the Rigidbody2D 
 
    void Start() 
    { 
        rb = GetComponent<Rigidbody2D>(); 
 
        // Ensure player reference is assigned 
        if (player == null) 
        { 
            Debug.LogError("Player is not assigned to EnemyAI."); 
        } 
    } 
 
    void Update() 
    { 
        if (player != null) 
        { 
            // Calculate direction to the player 
            Vector2 direction = (player.position - transform.position).normalized; 
 
            // Apply movement using forces for smoother collision detection 
            rb.linearVelocity = direction * speed; 
        } 
}}
 





9.  Design and Animate Game Character in Unity. 
Step1: GameObject> 2D Object> Square
Step2: select Square(from Hierarchy)-> Window> Animation> Animation
Step3: Create idle and walk in 'animation window'
step4: Click record button and add custom idle anim(add positionY=0, 0.5, 1, 0.5, 0). Separate and keep timelap b/w 'blue nodes'
step5: Click record button and add custom walk anim(add positionY=0, 45, 90, 45, 0). Separate and keep timelap b/w 'blue nodes'
Step6: select Square(from Hierarchy)-> Window> Animation> Animator
step7: In Animator window go to parameter: Add Bool and name it IsMoving 
step8: IN Animator window right-click on Idle> Make Transition and connect it to Walk
step9: IN Animator window right-click on Walk> Make Transition and connect it to Idle
step10: Click on transition line and add IsMoving Condition for both condition lines.





10.Create Intelligent enemies in Unity 
step1: Set Layout To 2 by 3
step2: Edit> Project Settings> Set Active Input Handing = both
step3: Create wall "player 2D Object > sprites > square-add Box Colider 2D, Rigid Body2D(static)
step4: create enemy and player 2D Object > sprites > circle and set the color blue for player and red for enemy. add Box Colider 2D, Rigid Body2D(Dynamic, gravity scale=0)
Step5: 
Player Code:
using UnityEngine; 
 
public class PlayerMovement : MonoBehaviour 
{ 
    public float moveSpeed = 5f; 
 
    private Rigidbody2D rb; 
    private Vector2 moveInput; 
 
    void Start() 
    { 
        rb = GetComponent<Rigidbody2D>(); 
    } 
 
    void Update() 
    { 
        // Get input for movement 
        float moveX = Input.GetAxisRaw("Horizontal"); // -1 to 1 
        float moveY = Input.GetAxisRaw("Vertical"); // -1 to 1 
 
        moveInput = new Vector2(moveX, moveY).normalized; // Normalize to prevent diagonal speed 
boost 
    } 
 
    void FixedUpdate() 
    { 
        // Apply movement 
        rb.linearVelocity = moveInput * moveSpeed; 
    } 
} 
EnemyAI code:- 
using UnityEngine; 
 
public class EnemyAI : MonoBehaviour 
{ 
    public float speed = 3f;  // Speed at which the enemy moves 
    public Transform player;  // Reference to the player 
 
    private Rigidbody2D rb;   // Reference to the Rigidbody2D 
 
    void Start() 
    { 
        rb = GetComponent<Rigidbody2D>(); 
 
        // Ensure player reference is assigned 
        if (player == null) 
        { 
            Debug.LogError("Player is not assigned to EnemyAI."); 
        } 
    } 
 
    void Update() 
    { 
        if (player != null) 
        { 
            // Calculate direction to the player 
            Vector2 direction = (player.position - transform.position).normalized; 
 
            // Apply movement using forces for smoother collision detection 
            rb.linearVelocity = direction * speed; 
        } 
}}
